// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"github.com/vattle/sqlboiler/types"
)

// Design is an object representing the database table.
type Design struct {
	ID                  int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	ArtistID            int               `boil:"artist_id" json:"artist_id" toml:"artist_id" yaml:"artist_id"`
	Name                string            `boil:"name" json:"name" toml:"name" yaml:"name"`
	Slug                string            `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	Description         string            `boil:"description" json:"description" toml:"description" yaml:"description"`
	Tags                types.StringArray `boil:"tags" json:"tags,omitempty" toml:"tags" yaml:"tags,omitempty"`
	CategoryTags        types.StringArray `boil:"category_tags" json:"category_tags,omitempty" toml:"category_tags" yaml:"category_tags,omitempty"`
	Mature              bool              `boil:"mature" json:"mature" toml:"mature" yaml:"mature"`
	ActiveProductsCount int               `boil:"active_products_count" json:"active_products_count" toml:"active_products_count" yaml:"active_products_count"`

	R *designR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L designL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// designR is where relationships are stored.
type designR struct {
	Artist   *Artist
	Products ProductSlice
}

// designL is where Load methods for each relationship are stored.
type designL struct{}

var (
	designColumns               = []string{"id", "artist_id", "name", "slug", "description", "tags", "category_tags", "mature", "active_products_count"}
	designColumnsWithoutDefault = []string{"artist_id", "name", "slug"}
	designColumnsWithDefault    = []string{"id", "description", "tags", "category_tags", "mature", "active_products_count"}
	designPrimaryKeyColumns     = []string{"id"}
)

type (
	// DesignSlice is an alias for a slice of pointers to Design.
	// This should generally be used opposed to []Design.
	DesignSlice []*Design
	// DesignHook is the signature for custom Design hook methods
	DesignHook func(boil.Executor, *Design) error

	designQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	designType                 = reflect.TypeOf(&Design{})
	designMapping              = queries.MakeStructMapping(designType)
	designPrimaryKeyMapping, _ = queries.BindMapping(designType, designMapping, designPrimaryKeyColumns)
	designInsertCacheMut       sync.RWMutex
	designInsertCache          = make(map[string]insertCache)
	designUpdateCacheMut       sync.RWMutex
	designUpdateCache          = make(map[string]updateCache)
	designUpsertCacheMut       sync.RWMutex
	designUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var designBeforeInsertHooks []DesignHook
var designBeforeUpdateHooks []DesignHook
var designBeforeDeleteHooks []DesignHook
var designBeforeUpsertHooks []DesignHook

var designAfterInsertHooks []DesignHook
var designAfterSelectHooks []DesignHook
var designAfterUpdateHooks []DesignHook
var designAfterDeleteHooks []DesignHook
var designAfterUpsertHooks []DesignHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Design) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range designBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Design) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range designBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Design) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range designBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Design) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range designBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Design) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range designAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Design) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range designAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Design) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range designAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Design) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range designAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Design) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range designAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDesignHook registers your hook function for all future operations.
func AddDesignHook(hookPoint boil.HookPoint, designHook DesignHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		designBeforeInsertHooks = append(designBeforeInsertHooks, designHook)
	case boil.BeforeUpdateHook:
		designBeforeUpdateHooks = append(designBeforeUpdateHooks, designHook)
	case boil.BeforeDeleteHook:
		designBeforeDeleteHooks = append(designBeforeDeleteHooks, designHook)
	case boil.BeforeUpsertHook:
		designBeforeUpsertHooks = append(designBeforeUpsertHooks, designHook)
	case boil.AfterInsertHook:
		designAfterInsertHooks = append(designAfterInsertHooks, designHook)
	case boil.AfterSelectHook:
		designAfterSelectHooks = append(designAfterSelectHooks, designHook)
	case boil.AfterUpdateHook:
		designAfterUpdateHooks = append(designAfterUpdateHooks, designHook)
	case boil.AfterDeleteHook:
		designAfterDeleteHooks = append(designAfterDeleteHooks, designHook)
	case boil.AfterUpsertHook:
		designAfterUpsertHooks = append(designAfterUpsertHooks, designHook)
	}
}

// OneP returns a single design record from the query, and panics on error.
func (q designQuery) OneP() *Design {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single design record from the query.
func (q designQuery) One() (*Design, error) {
	o := &Design{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for designs")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Design records from the query, and panics on error.
func (q designQuery) AllP() DesignSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Design records from the query.
func (q designQuery) All() (DesignSlice, error) {
	var o []*Design

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Design slice")
	}

	if len(designAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Design records in the query, and panics on error.
func (q designQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Design records in the query.
func (q designQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count designs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q designQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q designQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if designs exists")
	}

	return count > 0, nil
}

// ArtistG pointed to by the foreign key.
func (o *Design) ArtistG(mods ...qm.QueryMod) artistQuery {
	return o.Artist(boil.GetDB(), mods...)
}

// Artist pointed to by the foreign key.
func (o *Design) Artist(exec boil.Executor, mods ...qm.QueryMod) artistQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ArtistID),
	}

	queryMods = append(queryMods, mods...)

	query := Artists(exec, queryMods...)
	queries.SetFrom(query.Query, "\"artists\"")

	return query
}

// ProductsG retrieves all the product's products.
func (o *Design) ProductsG(mods ...qm.QueryMod) productQuery {
	return o.Products(boil.GetDB(), mods...)
}

// Products retrieves all the product's products with an executor.
func (o *Design) Products(exec boil.Executor, mods ...qm.QueryMod) productQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"products\".\"design_id\"=?", o.ID),
	)

	query := Products(exec, queryMods...)
	queries.SetFrom(query.Query, "\"products\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"products\".*"})
	}

	return query
}

// LoadArtist allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (designL) LoadArtist(e boil.Executor, singular bool, maybeDesign interface{}) error {
	var slice []*Design
	var object *Design

	count := 1
	if singular {
		object = maybeDesign.(*Design)
	} else {
		slice = *maybeDesign.(*[]*Design)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &designR{}
		}
		args[0] = object.ArtistID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &designR{}
			}
			args[i] = obj.ArtistID
		}
	}

	query := fmt.Sprintf(
		"select * from \"artists\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Artist")
	}
	defer results.Close()

	var resultSlice []*Artist
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Artist")
	}

	if len(designAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Artist = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ArtistID == foreign.ID {
				local.R.Artist = foreign
				break
			}
		}
	}

	return nil
}

// LoadProducts allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (designL) LoadProducts(e boil.Executor, singular bool, maybeDesign interface{}) error {
	var slice []*Design
	var object *Design

	count := 1
	if singular {
		object = maybeDesign.(*Design)
	} else {
		slice = *maybeDesign.(*[]*Design)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &designR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &designR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"products\" where \"design_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load products")
	}
	defer results.Close()

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Products = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DesignID {
				local.R.Products = append(local.R.Products, foreign)
				break
			}
		}
	}

	return nil
}

// SetArtistG of the design to the related item.
// Sets o.R.Artist to related.
// Adds o to related.R.Designs.
// Uses the global database handle.
func (o *Design) SetArtistG(insert bool, related *Artist) error {
	return o.SetArtist(boil.GetDB(), insert, related)
}

// SetArtistP of the design to the related item.
// Sets o.R.Artist to related.
// Adds o to related.R.Designs.
// Panics on error.
func (o *Design) SetArtistP(exec boil.Executor, insert bool, related *Artist) {
	if err := o.SetArtist(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetArtistGP of the design to the related item.
// Sets o.R.Artist to related.
// Adds o to related.R.Designs.
// Uses the global database handle and panics on error.
func (o *Design) SetArtistGP(insert bool, related *Artist) {
	if err := o.SetArtist(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetArtist of the design to the related item.
// Sets o.R.Artist to related.
// Adds o to related.R.Designs.
func (o *Design) SetArtist(exec boil.Executor, insert bool, related *Artist) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"designs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"artist_id"}),
		strmangle.WhereClause("\"", "\"", 2, designPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ArtistID = related.ID

	if o.R == nil {
		o.R = &designR{
			Artist: related,
		}
	} else {
		o.R.Artist = related
	}

	if related.R == nil {
		related.R = &artistR{
			Designs: DesignSlice{o},
		}
	} else {
		related.R.Designs = append(related.R.Designs, o)
	}

	return nil
}

// AddProductsG adds the given related objects to the existing relationships
// of the design, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Design appropriately.
// Uses the global database handle.
func (o *Design) AddProductsG(insert bool, related ...*Product) error {
	return o.AddProducts(boil.GetDB(), insert, related...)
}

// AddProductsP adds the given related objects to the existing relationships
// of the design, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Design appropriately.
// Panics on error.
func (o *Design) AddProductsP(exec boil.Executor, insert bool, related ...*Product) {
	if err := o.AddProducts(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddProductsGP adds the given related objects to the existing relationships
// of the design, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Design appropriately.
// Uses the global database handle and panics on error.
func (o *Design) AddProductsGP(insert bool, related ...*Product) {
	if err := o.AddProducts(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddProducts adds the given related objects to the existing relationships
// of the design, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Design appropriately.
func (o *Design) AddProducts(exec boil.Executor, insert bool, related ...*Product) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DesignID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"design_id"}),
				strmangle.WhereClause("\"", "\"", 2, productPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DesignID = o.ID
		}
	}

	if o.R == nil {
		o.R = &designR{
			Products: related,
		}
	} else {
		o.R.Products = append(o.R.Products, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productR{
				Design: o,
			}
		} else {
			rel.R.Design = o
		}
	}
	return nil
}

// DesignsG retrieves all records.
func DesignsG(mods ...qm.QueryMod) designQuery {
	return Designs(boil.GetDB(), mods...)
}

// Designs retrieves all the records using an executor.
func Designs(exec boil.Executor, mods ...qm.QueryMod) designQuery {
	mods = append(mods, qm.From("\"designs\""))
	return designQuery{NewQuery(exec, mods...)}
}

// FindDesignG retrieves a single record by ID.
func FindDesignG(id int, selectCols ...string) (*Design, error) {
	return FindDesign(boil.GetDB(), id, selectCols...)
}

// FindDesignGP retrieves a single record by ID, and panics on error.
func FindDesignGP(id int, selectCols ...string) *Design {
	retobj, err := FindDesign(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindDesign retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDesign(exec boil.Executor, id int, selectCols ...string) (*Design, error) {
	designObj := &Design{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"designs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(designObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from designs")
	}

	return designObj, nil
}

// FindDesignP retrieves a single record by ID with an executor, and panics on error.
func FindDesignP(exec boil.Executor, id int, selectCols ...string) *Design {
	retobj, err := FindDesign(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Design) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Design) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Design) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Design) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no designs provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(designColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	designInsertCacheMut.RLock()
	cache, cached := designInsertCache[key]
	designInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			designColumns,
			designColumnsWithDefault,
			designColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(designType, designMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(designType, designMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"designs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"designs\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into designs")
	}

	if !cached {
		designInsertCacheMut.Lock()
		designInsertCache[key] = cache
		designInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Design record. See Update for
// whitelist behavior description.
func (o *Design) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Design record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Design) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Design, and panics on error.
// See Update for whitelist behavior description.
func (o *Design) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Design.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Design) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	designUpdateCacheMut.RLock()
	cache, cached := designUpdateCache[key]
	designUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			designColumns,
			designPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update designs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"designs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, designPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(designType, designMapping, append(wl, designPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update designs row")
	}

	if !cached {
		designUpdateCacheMut.Lock()
		designUpdateCache[key] = cache
		designUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q designQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q designQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for designs")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DesignSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o DesignSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o DesignSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DesignSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), designPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"designs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, designPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in design slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Design) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Design) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Design) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Design) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no designs provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(designColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	designUpsertCacheMut.RLock()
	cache, cached := designUpsertCache[key]
	designUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			designColumns,
			designColumnsWithDefault,
			designColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			designColumns,
			designPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert designs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(designPrimaryKeyColumns))
			copy(conflict, designPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"designs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(designType, designMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(designType, designMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert designs")
	}

	if !cached {
		designUpsertCacheMut.Lock()
		designUpsertCache[key] = cache
		designUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Design record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Design) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Design record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Design) DeleteG() error {
	if o == nil {
		return errors.New("models: no Design provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Design record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Design) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Design record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Design) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Design provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), designPrimaryKeyMapping)
	sql := "DELETE FROM \"designs\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from designs")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q designQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q designQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no designQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from designs")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o DesignSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o DesignSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Design slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o DesignSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DesignSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Design slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(designBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), designPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"designs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, designPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from design slice")
	}

	if len(designAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Design) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Design) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Design) ReloadG() error {
	if o == nil {
		return errors.New("models: no Design provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Design) Reload(exec boil.Executor) error {
	ret, err := FindDesign(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *DesignSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *DesignSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DesignSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty DesignSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DesignSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	designs := DesignSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), designPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"designs\".* FROM \"designs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, designPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&designs)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DesignSlice")
	}

	*o = designs

	return nil
}

// DesignExists checks if the Design row exists.
func DesignExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"designs\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if designs exists")
	}

	return exists, nil
}

// DesignExistsG checks if the Design row exists.
func DesignExistsG(id int) (bool, error) {
	return DesignExists(boil.GetDB(), id)
}

// DesignExistsGP checks if the Design row exists. Panics on error.
func DesignExistsGP(id int) bool {
	e, err := DesignExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// DesignExistsP checks if the Design row exists. Panics on error.
func DesignExistsP(exec boil.Executor, id int) bool {
	e, err := DesignExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
