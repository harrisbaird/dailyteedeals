// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v6"
)

// CategoryDesign is an object representing the database table.
type CategoryDesign struct {
	ID         int      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CategoryID null.Int `boil:"category_id" json:"category_id,omitempty" toml:"category_id" yaml:"category_id,omitempty"`
	DesignID   null.Int `boil:"design_id" json:"design_id,omitempty" toml:"design_id" yaml:"design_id,omitempty"`

	R *categoryDesignR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L categoryDesignL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// categoryDesignR is where relationships are stored.
type categoryDesignR struct {
	Category *Category
	Design   *Design
}

// categoryDesignL is where Load methods for each relationship are stored.
type categoryDesignL struct{}

var (
	categoryDesignColumns               = []string{"id", "category_id", "design_id"}
	categoryDesignColumnsWithoutDefault = []string{"id", "category_id", "design_id"}
	categoryDesignColumnsWithDefault    = []string{}
	categoryDesignPrimaryKeyColumns     = []string{"id"}
)

type (
	// CategoryDesignSlice is an alias for a slice of pointers to CategoryDesign.
	// This should generally be used opposed to []CategoryDesign.
	CategoryDesignSlice []*CategoryDesign
	// CategoryDesignHook is the signature for custom CategoryDesign hook methods
	CategoryDesignHook func(boil.Executor, *CategoryDesign) error

	categoryDesignQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	categoryDesignType                 = reflect.TypeOf(&CategoryDesign{})
	categoryDesignMapping              = queries.MakeStructMapping(categoryDesignType)
	categoryDesignPrimaryKeyMapping, _ = queries.BindMapping(categoryDesignType, categoryDesignMapping, categoryDesignPrimaryKeyColumns)
	categoryDesignInsertCacheMut       sync.RWMutex
	categoryDesignInsertCache          = make(map[string]insertCache)
	categoryDesignUpdateCacheMut       sync.RWMutex
	categoryDesignUpdateCache          = make(map[string]updateCache)
	categoryDesignUpsertCacheMut       sync.RWMutex
	categoryDesignUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var categoryDesignBeforeInsertHooks []CategoryDesignHook
var categoryDesignBeforeUpdateHooks []CategoryDesignHook
var categoryDesignBeforeDeleteHooks []CategoryDesignHook
var categoryDesignBeforeUpsertHooks []CategoryDesignHook

var categoryDesignAfterInsertHooks []CategoryDesignHook
var categoryDesignAfterSelectHooks []CategoryDesignHook
var categoryDesignAfterUpdateHooks []CategoryDesignHook
var categoryDesignAfterDeleteHooks []CategoryDesignHook
var categoryDesignAfterUpsertHooks []CategoryDesignHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CategoryDesign) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range categoryDesignBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CategoryDesign) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range categoryDesignBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CategoryDesign) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range categoryDesignBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CategoryDesign) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range categoryDesignBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CategoryDesign) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range categoryDesignAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CategoryDesign) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range categoryDesignAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CategoryDesign) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range categoryDesignAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CategoryDesign) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range categoryDesignAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CategoryDesign) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range categoryDesignAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCategoryDesignHook registers your hook function for all future operations.
func AddCategoryDesignHook(hookPoint boil.HookPoint, categoryDesignHook CategoryDesignHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		categoryDesignBeforeInsertHooks = append(categoryDesignBeforeInsertHooks, categoryDesignHook)
	case boil.BeforeUpdateHook:
		categoryDesignBeforeUpdateHooks = append(categoryDesignBeforeUpdateHooks, categoryDesignHook)
	case boil.BeforeDeleteHook:
		categoryDesignBeforeDeleteHooks = append(categoryDesignBeforeDeleteHooks, categoryDesignHook)
	case boil.BeforeUpsertHook:
		categoryDesignBeforeUpsertHooks = append(categoryDesignBeforeUpsertHooks, categoryDesignHook)
	case boil.AfterInsertHook:
		categoryDesignAfterInsertHooks = append(categoryDesignAfterInsertHooks, categoryDesignHook)
	case boil.AfterSelectHook:
		categoryDesignAfterSelectHooks = append(categoryDesignAfterSelectHooks, categoryDesignHook)
	case boil.AfterUpdateHook:
		categoryDesignAfterUpdateHooks = append(categoryDesignAfterUpdateHooks, categoryDesignHook)
	case boil.AfterDeleteHook:
		categoryDesignAfterDeleteHooks = append(categoryDesignAfterDeleteHooks, categoryDesignHook)
	case boil.AfterUpsertHook:
		categoryDesignAfterUpsertHooks = append(categoryDesignAfterUpsertHooks, categoryDesignHook)
	}
}

// OneP returns a single categoryDesign record from the query, and panics on error.
func (q categoryDesignQuery) OneP() *CategoryDesign {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single categoryDesign record from the query.
func (q categoryDesignQuery) One() (*CategoryDesign, error) {
	o := &CategoryDesign{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for category_designs")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all CategoryDesign records from the query, and panics on error.
func (q categoryDesignQuery) AllP() CategoryDesignSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all CategoryDesign records from the query.
func (q categoryDesignQuery) All() (CategoryDesignSlice, error) {
	var o []*CategoryDesign

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CategoryDesign slice")
	}

	if len(categoryDesignAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all CategoryDesign records in the query, and panics on error.
func (q categoryDesignQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all CategoryDesign records in the query.
func (q categoryDesignQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count category_designs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q categoryDesignQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q categoryDesignQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if category_designs exists")
	}

	return count > 0, nil
}

// CategoryG pointed to by the foreign key.
func (o *CategoryDesign) CategoryG(mods ...qm.QueryMod) categoryQuery {
	return o.Category(boil.GetDB(), mods...)
}

// Category pointed to by the foreign key.
func (o *CategoryDesign) Category(exec boil.Executor, mods ...qm.QueryMod) categoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	query := Categories(exec, queryMods...)
	queries.SetFrom(query.Query, "\"categories\"")

	return query
}

// DesignG pointed to by the foreign key.
func (o *CategoryDesign) DesignG(mods ...qm.QueryMod) designQuery {
	return o.Design(boil.GetDB(), mods...)
}

// Design pointed to by the foreign key.
func (o *CategoryDesign) Design(exec boil.Executor, mods ...qm.QueryMod) designQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.DesignID),
	}

	queryMods = append(queryMods, mods...)

	query := Designs(exec, queryMods...)
	queries.SetFrom(query.Query, "\"designs\"")

	return query
} // LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (categoryDesignL) LoadCategory(e boil.Executor, singular bool, maybeCategoryDesign interface{}) error {
	var slice []*CategoryDesign
	var object *CategoryDesign

	count := 1
	if singular {
		object = maybeCategoryDesign.(*CategoryDesign)
	} else {
		slice = *maybeCategoryDesign.(*[]*CategoryDesign)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &categoryDesignR{}
		}
		args[0] = object.CategoryID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &categoryDesignR{}
			}
			args[i] = obj.CategoryID
		}
	}

	query := fmt.Sprintf(
		"select * from \"categories\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Category")
	}
	defer results.Close()

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Category")
	}

	if len(categoryDesignAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Category = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CategoryID.Int == foreign.ID {
				local.R.Category = foreign
				break
			}
		}
	}

	return nil
}

// LoadDesign allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (categoryDesignL) LoadDesign(e boil.Executor, singular bool, maybeCategoryDesign interface{}) error {
	var slice []*CategoryDesign
	var object *CategoryDesign

	count := 1
	if singular {
		object = maybeCategoryDesign.(*CategoryDesign)
	} else {
		slice = *maybeCategoryDesign.(*[]*CategoryDesign)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &categoryDesignR{}
		}
		args[0] = object.DesignID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &categoryDesignR{}
			}
			args[i] = obj.DesignID
		}
	}

	query := fmt.Sprintf(
		"select * from \"designs\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Design")
	}
	defer results.Close()

	var resultSlice []*Design
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Design")
	}

	if len(categoryDesignAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Design = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DesignID.Int == foreign.ID {
				local.R.Design = foreign
				break
			}
		}
	}

	return nil
}

// SetCategoryG of the category_design to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.CategoryDesigns.
// Uses the global database handle.
func (o *CategoryDesign) SetCategoryG(insert bool, related *Category) error {
	return o.SetCategory(boil.GetDB(), insert, related)
}

// SetCategoryP of the category_design to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.CategoryDesigns.
// Panics on error.
func (o *CategoryDesign) SetCategoryP(exec boil.Executor, insert bool, related *Category) {
	if err := o.SetCategory(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCategoryGP of the category_design to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.CategoryDesigns.
// Uses the global database handle and panics on error.
func (o *CategoryDesign) SetCategoryGP(insert bool, related *Category) {
	if err := o.SetCategory(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCategory of the category_design to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.CategoryDesigns.
func (o *CategoryDesign) SetCategory(exec boil.Executor, insert bool, related *Category) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"category_designs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
		strmangle.WhereClause("\"", "\"", 2, categoryDesignPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CategoryID.Int = related.ID
	o.CategoryID.Valid = true

	if o.R == nil {
		o.R = &categoryDesignR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &categoryR{
			CategoryDesigns: CategoryDesignSlice{o},
		}
	} else {
		related.R.CategoryDesigns = append(related.R.CategoryDesigns, o)
	}

	return nil
}

// RemoveCategoryG relationship.
// Sets o.R.Category to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *CategoryDesign) RemoveCategoryG(related *Category) error {
	return o.RemoveCategory(boil.GetDB(), related)
}

// RemoveCategoryP relationship.
// Sets o.R.Category to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *CategoryDesign) RemoveCategoryP(exec boil.Executor, related *Category) {
	if err := o.RemoveCategory(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCategoryGP relationship.
// Sets o.R.Category to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *CategoryDesign) RemoveCategoryGP(related *Category) {
	if err := o.RemoveCategory(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCategory relationship.
// Sets o.R.Category to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *CategoryDesign) RemoveCategory(exec boil.Executor, related *Category) error {
	var err error

	o.CategoryID.Valid = false
	if err = o.Update(exec, "category_id"); err != nil {
		o.CategoryID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Category = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CategoryDesigns {
		if o.CategoryID.Int != ri.CategoryID.Int {
			continue
		}

		ln := len(related.R.CategoryDesigns)
		if ln > 1 && i < ln-1 {
			related.R.CategoryDesigns[i] = related.R.CategoryDesigns[ln-1]
		}
		related.R.CategoryDesigns = related.R.CategoryDesigns[:ln-1]
		break
	}
	return nil
}

// SetDesignG of the category_design to the related item.
// Sets o.R.Design to related.
// Adds o to related.R.CategoryDesigns.
// Uses the global database handle.
func (o *CategoryDesign) SetDesignG(insert bool, related *Design) error {
	return o.SetDesign(boil.GetDB(), insert, related)
}

// SetDesignP of the category_design to the related item.
// Sets o.R.Design to related.
// Adds o to related.R.CategoryDesigns.
// Panics on error.
func (o *CategoryDesign) SetDesignP(exec boil.Executor, insert bool, related *Design) {
	if err := o.SetDesign(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetDesignGP of the category_design to the related item.
// Sets o.R.Design to related.
// Adds o to related.R.CategoryDesigns.
// Uses the global database handle and panics on error.
func (o *CategoryDesign) SetDesignGP(insert bool, related *Design) {
	if err := o.SetDesign(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetDesign of the category_design to the related item.
// Sets o.R.Design to related.
// Adds o to related.R.CategoryDesigns.
func (o *CategoryDesign) SetDesign(exec boil.Executor, insert bool, related *Design) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"category_designs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"design_id"}),
		strmangle.WhereClause("\"", "\"", 2, categoryDesignPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DesignID.Int = related.ID
	o.DesignID.Valid = true

	if o.R == nil {
		o.R = &categoryDesignR{
			Design: related,
		}
	} else {
		o.R.Design = related
	}

	if related.R == nil {
		related.R = &designR{
			CategoryDesigns: CategoryDesignSlice{o},
		}
	} else {
		related.R.CategoryDesigns = append(related.R.CategoryDesigns, o)
	}

	return nil
}

// RemoveDesignG relationship.
// Sets o.R.Design to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *CategoryDesign) RemoveDesignG(related *Design) error {
	return o.RemoveDesign(boil.GetDB(), related)
}

// RemoveDesignP relationship.
// Sets o.R.Design to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *CategoryDesign) RemoveDesignP(exec boil.Executor, related *Design) {
	if err := o.RemoveDesign(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveDesignGP relationship.
// Sets o.R.Design to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *CategoryDesign) RemoveDesignGP(related *Design) {
	if err := o.RemoveDesign(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveDesign relationship.
// Sets o.R.Design to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *CategoryDesign) RemoveDesign(exec boil.Executor, related *Design) error {
	var err error

	o.DesignID.Valid = false
	if err = o.Update(exec, "design_id"); err != nil {
		o.DesignID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Design = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CategoryDesigns {
		if o.DesignID.Int != ri.DesignID.Int {
			continue
		}

		ln := len(related.R.CategoryDesigns)
		if ln > 1 && i < ln-1 {
			related.R.CategoryDesigns[i] = related.R.CategoryDesigns[ln-1]
		}
		related.R.CategoryDesigns = related.R.CategoryDesigns[:ln-1]
		break
	}
	return nil
}

// CategoryDesignsG retrieves all records.
func CategoryDesignsG(mods ...qm.QueryMod) categoryDesignQuery {
	return CategoryDesigns(boil.GetDB(), mods...)
}

// CategoryDesigns retrieves all the records using an executor.
func CategoryDesigns(exec boil.Executor, mods ...qm.QueryMod) categoryDesignQuery {
	mods = append(mods, qm.From("\"category_designs\""))
	return categoryDesignQuery{NewQuery(exec, mods...)}
}

// FindCategoryDesignG retrieves a single record by ID.
func FindCategoryDesignG(id int, selectCols ...string) (*CategoryDesign, error) {
	return FindCategoryDesign(boil.GetDB(), id, selectCols...)
}

// FindCategoryDesignGP retrieves a single record by ID, and panics on error.
func FindCategoryDesignGP(id int, selectCols ...string) *CategoryDesign {
	retobj, err := FindCategoryDesign(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindCategoryDesign retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCategoryDesign(exec boil.Executor, id int, selectCols ...string) (*CategoryDesign, error) {
	categoryDesignObj := &CategoryDesign{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"category_designs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(categoryDesignObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from category_designs")
	}

	return categoryDesignObj, nil
}

// FindCategoryDesignP retrieves a single record by ID with an executor, and panics on error.
func FindCategoryDesignP(exec boil.Executor, id int, selectCols ...string) *CategoryDesign {
	retobj, err := FindCategoryDesign(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CategoryDesign) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *CategoryDesign) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *CategoryDesign) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *CategoryDesign) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no category_designs provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(categoryDesignColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	categoryDesignInsertCacheMut.RLock()
	cache, cached := categoryDesignInsertCache[key]
	categoryDesignInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			categoryDesignColumns,
			categoryDesignColumnsWithDefault,
			categoryDesignColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(categoryDesignType, categoryDesignMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(categoryDesignType, categoryDesignMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"category_designs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"category_designs\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into category_designs")
	}

	if !cached {
		categoryDesignInsertCacheMut.Lock()
		categoryDesignInsertCache[key] = cache
		categoryDesignInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single CategoryDesign record. See Update for
// whitelist behavior description.
func (o *CategoryDesign) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single CategoryDesign record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *CategoryDesign) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the CategoryDesign, and panics on error.
// See Update for whitelist behavior description.
func (o *CategoryDesign) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the CategoryDesign.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *CategoryDesign) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	categoryDesignUpdateCacheMut.RLock()
	cache, cached := categoryDesignUpdateCache[key]
	categoryDesignUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			categoryDesignColumns,
			categoryDesignPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update category_designs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"category_designs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, categoryDesignPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(categoryDesignType, categoryDesignMapping, append(wl, categoryDesignPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update category_designs row")
	}

	if !cached {
		categoryDesignUpdateCacheMut.Lock()
		categoryDesignUpdateCache[key] = cache
		categoryDesignUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q categoryDesignQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q categoryDesignQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for category_designs")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CategoryDesignSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o CategoryDesignSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o CategoryDesignSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CategoryDesignSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoryDesignPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"category_designs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, categoryDesignPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in categoryDesign slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CategoryDesign) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *CategoryDesign) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *CategoryDesign) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *CategoryDesign) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no category_designs provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(categoryDesignColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	categoryDesignUpsertCacheMut.RLock()
	cache, cached := categoryDesignUpsertCache[key]
	categoryDesignUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			categoryDesignColumns,
			categoryDesignColumnsWithDefault,
			categoryDesignColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			categoryDesignColumns,
			categoryDesignPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert category_designs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(categoryDesignPrimaryKeyColumns))
			copy(conflict, categoryDesignPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"category_designs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(categoryDesignType, categoryDesignMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(categoryDesignType, categoryDesignMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert category_designs")
	}

	if !cached {
		categoryDesignUpsertCacheMut.Lock()
		categoryDesignUpsertCache[key] = cache
		categoryDesignUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single CategoryDesign record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *CategoryDesign) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single CategoryDesign record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CategoryDesign) DeleteG() error {
	if o == nil {
		return errors.New("models: no CategoryDesign provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single CategoryDesign record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *CategoryDesign) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single CategoryDesign record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CategoryDesign) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no CategoryDesign provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), categoryDesignPrimaryKeyMapping)
	sql := "DELETE FROM \"category_designs\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from category_designs")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q categoryDesignQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q categoryDesignQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no categoryDesignQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from category_designs")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o CategoryDesignSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o CategoryDesignSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no CategoryDesign slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o CategoryDesignSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CategoryDesignSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no CategoryDesign slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(categoryDesignBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoryDesignPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"category_designs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, categoryDesignPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from categoryDesign slice")
	}

	if len(categoryDesignAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *CategoryDesign) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *CategoryDesign) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CategoryDesign) ReloadG() error {
	if o == nil {
		return errors.New("models: no CategoryDesign provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CategoryDesign) Reload(exec boil.Executor) error {
	ret, err := FindCategoryDesign(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *CategoryDesignSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *CategoryDesignSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CategoryDesignSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty CategoryDesignSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CategoryDesignSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	categoryDesigns := CategoryDesignSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoryDesignPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"category_designs\".* FROM \"category_designs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, categoryDesignPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&categoryDesigns)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CategoryDesignSlice")
	}

	*o = categoryDesigns

	return nil
}

// CategoryDesignExists checks if the CategoryDesign row exists.
func CategoryDesignExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"category_designs\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if category_designs exists")
	}

	return exists, nil
}

// CategoryDesignExistsG checks if the CategoryDesign row exists.
func CategoryDesignExistsG(id int) (bool, error) {
	return CategoryDesignExists(boil.GetDB(), id)
}

// CategoryDesignExistsGP checks if the CategoryDesign row exists. Panics on error.
func CategoryDesignExistsGP(id int) bool {
	e, err := CategoryDesignExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// CategoryDesignExistsP checks if the CategoryDesign row exists. Panics on error.
func CategoryDesignExistsP(exec boil.Executor, id int) bool {
	e, err := CategoryDesignExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
