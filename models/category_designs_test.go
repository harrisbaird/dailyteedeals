// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testCategoryDesigns(t *testing.T) {
	t.Parallel()

	query := CategoryDesigns(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testCategoryDesignsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	categoryDesign := &CategoryDesign{}
	if err = randomize.Struct(seed, categoryDesign, categoryDesignDBTypes, true, categoryDesignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CategoryDesign struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = categoryDesign.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = categoryDesign.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := CategoryDesigns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCategoryDesignsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	categoryDesign := &CategoryDesign{}
	if err = randomize.Struct(seed, categoryDesign, categoryDesignDBTypes, true, categoryDesignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CategoryDesign struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = categoryDesign.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = CategoryDesigns(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := CategoryDesigns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCategoryDesignsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	categoryDesign := &CategoryDesign{}
	if err = randomize.Struct(seed, categoryDesign, categoryDesignDBTypes, true, categoryDesignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CategoryDesign struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = categoryDesign.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := CategoryDesignSlice{categoryDesign}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := CategoryDesigns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testCategoryDesignsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	categoryDesign := &CategoryDesign{}
	if err = randomize.Struct(seed, categoryDesign, categoryDesignDBTypes, true, categoryDesignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CategoryDesign struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = categoryDesign.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := CategoryDesignExists(tx, categoryDesign.ID)
	if err != nil {
		t.Errorf("Unable to check if CategoryDesign exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CategoryDesignExistsG to return true, but got false.")
	}
}
func testCategoryDesignsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	categoryDesign := &CategoryDesign{}
	if err = randomize.Struct(seed, categoryDesign, categoryDesignDBTypes, true, categoryDesignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CategoryDesign struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = categoryDesign.Insert(tx); err != nil {
		t.Error(err)
	}

	categoryDesignFound, err := FindCategoryDesign(tx, categoryDesign.ID)
	if err != nil {
		t.Error(err)
	}

	if categoryDesignFound == nil {
		t.Error("want a record, got nil")
	}
}
func testCategoryDesignsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	categoryDesign := &CategoryDesign{}
	if err = randomize.Struct(seed, categoryDesign, categoryDesignDBTypes, true, categoryDesignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CategoryDesign struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = categoryDesign.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = CategoryDesigns(tx).Bind(categoryDesign); err != nil {
		t.Error(err)
	}
}

func testCategoryDesignsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	categoryDesign := &CategoryDesign{}
	if err = randomize.Struct(seed, categoryDesign, categoryDesignDBTypes, true, categoryDesignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CategoryDesign struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = categoryDesign.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := CategoryDesigns(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCategoryDesignsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	categoryDesignOne := &CategoryDesign{}
	categoryDesignTwo := &CategoryDesign{}
	if err = randomize.Struct(seed, categoryDesignOne, categoryDesignDBTypes, false, categoryDesignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CategoryDesign struct: %s", err)
	}
	if err = randomize.Struct(seed, categoryDesignTwo, categoryDesignDBTypes, false, categoryDesignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CategoryDesign struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = categoryDesignOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = categoryDesignTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := CategoryDesigns(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCategoryDesignsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	categoryDesignOne := &CategoryDesign{}
	categoryDesignTwo := &CategoryDesign{}
	if err = randomize.Struct(seed, categoryDesignOne, categoryDesignDBTypes, false, categoryDesignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CategoryDesign struct: %s", err)
	}
	if err = randomize.Struct(seed, categoryDesignTwo, categoryDesignDBTypes, false, categoryDesignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CategoryDesign struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = categoryDesignOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = categoryDesignTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := CategoryDesigns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func categoryDesignBeforeInsertHook(e boil.Executor, o *CategoryDesign) error {
	*o = CategoryDesign{}
	return nil
}

func categoryDesignAfterInsertHook(e boil.Executor, o *CategoryDesign) error {
	*o = CategoryDesign{}
	return nil
}

func categoryDesignAfterSelectHook(e boil.Executor, o *CategoryDesign) error {
	*o = CategoryDesign{}
	return nil
}

func categoryDesignBeforeUpdateHook(e boil.Executor, o *CategoryDesign) error {
	*o = CategoryDesign{}
	return nil
}

func categoryDesignAfterUpdateHook(e boil.Executor, o *CategoryDesign) error {
	*o = CategoryDesign{}
	return nil
}

func categoryDesignBeforeDeleteHook(e boil.Executor, o *CategoryDesign) error {
	*o = CategoryDesign{}
	return nil
}

func categoryDesignAfterDeleteHook(e boil.Executor, o *CategoryDesign) error {
	*o = CategoryDesign{}
	return nil
}

func categoryDesignBeforeUpsertHook(e boil.Executor, o *CategoryDesign) error {
	*o = CategoryDesign{}
	return nil
}

func categoryDesignAfterUpsertHook(e boil.Executor, o *CategoryDesign) error {
	*o = CategoryDesign{}
	return nil
}

func testCategoryDesignsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &CategoryDesign{}
	o := &CategoryDesign{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, categoryDesignDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CategoryDesign object: %s", err)
	}

	AddCategoryDesignHook(boil.BeforeInsertHook, categoryDesignBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	categoryDesignBeforeInsertHooks = []CategoryDesignHook{}

	AddCategoryDesignHook(boil.AfterInsertHook, categoryDesignAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	categoryDesignAfterInsertHooks = []CategoryDesignHook{}

	AddCategoryDesignHook(boil.AfterSelectHook, categoryDesignAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	categoryDesignAfterSelectHooks = []CategoryDesignHook{}

	AddCategoryDesignHook(boil.BeforeUpdateHook, categoryDesignBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	categoryDesignBeforeUpdateHooks = []CategoryDesignHook{}

	AddCategoryDesignHook(boil.AfterUpdateHook, categoryDesignAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	categoryDesignAfterUpdateHooks = []CategoryDesignHook{}

	AddCategoryDesignHook(boil.BeforeDeleteHook, categoryDesignBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	categoryDesignBeforeDeleteHooks = []CategoryDesignHook{}

	AddCategoryDesignHook(boil.AfterDeleteHook, categoryDesignAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	categoryDesignAfterDeleteHooks = []CategoryDesignHook{}

	AddCategoryDesignHook(boil.BeforeUpsertHook, categoryDesignBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	categoryDesignBeforeUpsertHooks = []CategoryDesignHook{}

	AddCategoryDesignHook(boil.AfterUpsertHook, categoryDesignAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	categoryDesignAfterUpsertHooks = []CategoryDesignHook{}
}
func testCategoryDesignsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	categoryDesign := &CategoryDesign{}
	if err = randomize.Struct(seed, categoryDesign, categoryDesignDBTypes, true, categoryDesignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CategoryDesign struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = categoryDesign.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := CategoryDesigns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCategoryDesignsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	categoryDesign := &CategoryDesign{}
	if err = randomize.Struct(seed, categoryDesign, categoryDesignDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CategoryDesign struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = categoryDesign.Insert(tx, categoryDesignColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := CategoryDesigns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCategoryDesignToOneCategoryUsingCategory(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local CategoryDesign
	var foreign Category

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, categoryDesignDBTypes, true, categoryDesignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CategoryDesign struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, categoryDBTypes, false, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	local.CategoryID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.CategoryID.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Category(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CategoryDesignSlice{&local}
	if err = local.L.LoadCategory(tx, false, (*[]*CategoryDesign)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Category = nil
	if err = local.L.LoadCategory(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCategoryDesignToOneDesignUsingDesign(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local CategoryDesign
	var foreign Design

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, categoryDesignDBTypes, true, categoryDesignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CategoryDesign struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, designDBTypes, false, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	local.DesignID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.DesignID.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Design(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CategoryDesignSlice{&local}
	if err = local.L.LoadDesign(tx, false, (*[]*CategoryDesign)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Design == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Design = nil
	if err = local.L.LoadDesign(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Design == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCategoryDesignToOneSetOpCategoryUsingCategory(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a CategoryDesign
	var b, c Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, categoryDesignDBTypes, false, strmangle.SetComplement(categoryDesignPrimaryKeyColumns, categoryDesignColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Category{&b, &c} {
		err = a.SetCategory(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Category != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CategoryDesigns[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CategoryID.Int != x.ID {
			t.Error("foreign key was wrong value", a.CategoryID.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CategoryID.Int))
		reflect.Indirect(reflect.ValueOf(&a.CategoryID.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CategoryID.Int != x.ID {
			t.Error("foreign key was wrong value", a.CategoryID.Int, x.ID)
		}
	}
}

func testCategoryDesignToOneRemoveOpCategoryUsingCategory(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a CategoryDesign
	var b Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, categoryDesignDBTypes, false, strmangle.SetComplement(categoryDesignPrimaryKeyColumns, categoryDesignColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCategory(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCategory(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Category(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Category != nil {
		t.Error("R struct entry should be nil")
	}

	if a.CategoryID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CategoryDesigns) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCategoryDesignToOneSetOpDesignUsingDesign(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a CategoryDesign
	var b, c Design

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, categoryDesignDBTypes, false, strmangle.SetComplement(categoryDesignPrimaryKeyColumns, categoryDesignColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, designDBTypes, false, strmangle.SetComplement(designPrimaryKeyColumns, designColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, designDBTypes, false, strmangle.SetComplement(designPrimaryKeyColumns, designColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Design{&b, &c} {
		err = a.SetDesign(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Design != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CategoryDesigns[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DesignID.Int != x.ID {
			t.Error("foreign key was wrong value", a.DesignID.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DesignID.Int))
		reflect.Indirect(reflect.ValueOf(&a.DesignID.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DesignID.Int != x.ID {
			t.Error("foreign key was wrong value", a.DesignID.Int, x.ID)
		}
	}
}

func testCategoryDesignToOneRemoveOpDesignUsingDesign(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a CategoryDesign
	var b Design

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, categoryDesignDBTypes, false, strmangle.SetComplement(categoryDesignPrimaryKeyColumns, categoryDesignColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, designDBTypes, false, strmangle.SetComplement(designPrimaryKeyColumns, designColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDesign(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDesign(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Design(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Design != nil {
		t.Error("R struct entry should be nil")
	}

	if a.DesignID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CategoryDesigns) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCategoryDesignsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	categoryDesign := &CategoryDesign{}
	if err = randomize.Struct(seed, categoryDesign, categoryDesignDBTypes, true, categoryDesignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CategoryDesign struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = categoryDesign.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = categoryDesign.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testCategoryDesignsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	categoryDesign := &CategoryDesign{}
	if err = randomize.Struct(seed, categoryDesign, categoryDesignDBTypes, true, categoryDesignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CategoryDesign struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = categoryDesign.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := CategoryDesignSlice{categoryDesign}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testCategoryDesignsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	categoryDesign := &CategoryDesign{}
	if err = randomize.Struct(seed, categoryDesign, categoryDesignDBTypes, true, categoryDesignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CategoryDesign struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = categoryDesign.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := CategoryDesigns(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	categoryDesignDBTypes = map[string]string{`CategoryID`: `integer`, `DesignID`: `integer`, `ID`: `integer`}
	_                     = bytes.MinRead
)

func testCategoryDesignsUpdate(t *testing.T) {
	t.Parallel()

	if len(categoryDesignColumns) == len(categoryDesignPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	categoryDesign := &CategoryDesign{}
	if err = randomize.Struct(seed, categoryDesign, categoryDesignDBTypes, true, categoryDesignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CategoryDesign struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = categoryDesign.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := CategoryDesigns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, categoryDesign, categoryDesignDBTypes, true, categoryDesignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CategoryDesign struct: %s", err)
	}

	if err = categoryDesign.Update(tx); err != nil {
		t.Error(err)
	}
}

func testCategoryDesignsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(categoryDesignColumns) == len(categoryDesignPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	categoryDesign := &CategoryDesign{}
	if err = randomize.Struct(seed, categoryDesign, categoryDesignDBTypes, true, categoryDesignColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CategoryDesign struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = categoryDesign.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := CategoryDesigns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, categoryDesign, categoryDesignDBTypes, true, categoryDesignPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CategoryDesign struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(categoryDesignColumns, categoryDesignPrimaryKeyColumns) {
		fields = categoryDesignColumns
	} else {
		fields = strmangle.SetComplement(
			categoryDesignColumns,
			categoryDesignPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(categoryDesign))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := CategoryDesignSlice{categoryDesign}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testCategoryDesignsUpsert(t *testing.T) {
	t.Parallel()

	if len(categoryDesignColumns) == len(categoryDesignPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	categoryDesign := CategoryDesign{}
	if err = randomize.Struct(seed, &categoryDesign, categoryDesignDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CategoryDesign struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = categoryDesign.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert CategoryDesign: %s", err)
	}

	count, err := CategoryDesigns(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &categoryDesign, categoryDesignDBTypes, false, categoryDesignPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CategoryDesign struct: %s", err)
	}

	if err = categoryDesign.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert CategoryDesign: %s", err)
	}

	count, err = CategoryDesigns(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
