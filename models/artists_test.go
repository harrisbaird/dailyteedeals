// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testArtists(t *testing.T) {
	t.Parallel()

	query := Artists(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testArtistsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	artist := &Artist{}
	if err = randomize.Struct(seed, artist, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = artist.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = artist.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Artists(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testArtistsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	artist := &Artist{}
	if err = randomize.Struct(seed, artist, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = artist.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Artists(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Artists(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testArtistsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	artist := &Artist{}
	if err = randomize.Struct(seed, artist, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = artist.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ArtistSlice{artist}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Artists(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testArtistsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	artist := &Artist{}
	if err = randomize.Struct(seed, artist, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = artist.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := ArtistExists(tx, artist.ID)
	if err != nil {
		t.Errorf("Unable to check if Artist exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ArtistExistsG to return true, but got false.")
	}
}
func testArtistsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	artist := &Artist{}
	if err = randomize.Struct(seed, artist, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = artist.Insert(tx); err != nil {
		t.Error(err)
	}

	artistFound, err := FindArtist(tx, artist.ID)
	if err != nil {
		t.Error(err)
	}

	if artistFound == nil {
		t.Error("want a record, got nil")
	}
}
func testArtistsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	artist := &Artist{}
	if err = randomize.Struct(seed, artist, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = artist.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Artists(tx).Bind(artist); err != nil {
		t.Error(err)
	}
}

func testArtistsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	artist := &Artist{}
	if err = randomize.Struct(seed, artist, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = artist.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Artists(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testArtistsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	artistOne := &Artist{}
	artistTwo := &Artist{}
	if err = randomize.Struct(seed, artistOne, artistDBTypes, false, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}
	if err = randomize.Struct(seed, artistTwo, artistDBTypes, false, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = artistOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = artistTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Artists(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testArtistsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	artistOne := &Artist{}
	artistTwo := &Artist{}
	if err = randomize.Struct(seed, artistOne, artistDBTypes, false, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}
	if err = randomize.Struct(seed, artistTwo, artistDBTypes, false, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = artistOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = artistTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Artists(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func artistBeforeInsertHook(e boil.Executor, o *Artist) error {
	*o = Artist{}
	return nil
}

func artistAfterInsertHook(e boil.Executor, o *Artist) error {
	*o = Artist{}
	return nil
}

func artistAfterSelectHook(e boil.Executor, o *Artist) error {
	*o = Artist{}
	return nil
}

func artistBeforeUpdateHook(e boil.Executor, o *Artist) error {
	*o = Artist{}
	return nil
}

func artistAfterUpdateHook(e boil.Executor, o *Artist) error {
	*o = Artist{}
	return nil
}

func artistBeforeDeleteHook(e boil.Executor, o *Artist) error {
	*o = Artist{}
	return nil
}

func artistAfterDeleteHook(e boil.Executor, o *Artist) error {
	*o = Artist{}
	return nil
}

func artistBeforeUpsertHook(e boil.Executor, o *Artist) error {
	*o = Artist{}
	return nil
}

func artistAfterUpsertHook(e boil.Executor, o *Artist) error {
	*o = Artist{}
	return nil
}

func testArtistsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Artist{}
	o := &Artist{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, artistDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Artist object: %s", err)
	}

	AddArtistHook(boil.BeforeInsertHook, artistBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	artistBeforeInsertHooks = []ArtistHook{}

	AddArtistHook(boil.AfterInsertHook, artistAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	artistAfterInsertHooks = []ArtistHook{}

	AddArtistHook(boil.AfterSelectHook, artistAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	artistAfterSelectHooks = []ArtistHook{}

	AddArtistHook(boil.BeforeUpdateHook, artistBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	artistBeforeUpdateHooks = []ArtistHook{}

	AddArtistHook(boil.AfterUpdateHook, artistAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	artistAfterUpdateHooks = []ArtistHook{}

	AddArtistHook(boil.BeforeDeleteHook, artistBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	artistBeforeDeleteHooks = []ArtistHook{}

	AddArtistHook(boil.AfterDeleteHook, artistAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	artistAfterDeleteHooks = []ArtistHook{}

	AddArtistHook(boil.BeforeUpsertHook, artistBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	artistBeforeUpsertHooks = []ArtistHook{}

	AddArtistHook(boil.AfterUpsertHook, artistAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	artistAfterUpsertHooks = []ArtistHook{}
}
func testArtistsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	artist := &Artist{}
	if err = randomize.Struct(seed, artist, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = artist.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Artists(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testArtistsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	artist := &Artist{}
	if err = randomize.Struct(seed, artist, artistDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = artist.Insert(tx, artistColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Artists(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testArtistToManyDesigns(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Artist
	var b, c Design

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, designDBTypes, false, designColumnsWithDefault...)
	randomize.Struct(seed, &c, designDBTypes, false, designColumnsWithDefault...)

	b.ArtistID = a.ID
	c.ArtistID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	design, err := a.Designs(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range design {
		if v.ArtistID == b.ArtistID {
			bFound = true
		}
		if v.ArtistID == c.ArtistID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ArtistSlice{&a}
	if err = a.L.LoadDesigns(tx, false, (*[]*Artist)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Designs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Designs = nil
	if err = a.L.LoadDesigns(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Designs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", design)
	}
}

func testArtistToManyAddOpDesigns(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Artist
	var b, c, d, e Design

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, artistDBTypes, false, strmangle.SetComplement(artistPrimaryKeyColumns, artistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Design{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, designDBTypes, false, strmangle.SetComplement(designPrimaryKeyColumns, designColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Design{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDesigns(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ArtistID {
			t.Error("foreign key was wrong value", a.ID, first.ArtistID)
		}
		if a.ID != second.ArtistID {
			t.Error("foreign key was wrong value", a.ID, second.ArtistID)
		}

		if first.R.Artist != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Artist != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Designs[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Designs[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Designs(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testArtistsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	artist := &Artist{}
	if err = randomize.Struct(seed, artist, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = artist.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = artist.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testArtistsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	artist := &Artist{}
	if err = randomize.Struct(seed, artist, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = artist.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ArtistSlice{artist}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testArtistsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	artist := &Artist{}
	if err = randomize.Struct(seed, artist, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = artist.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Artists(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	artistDBTypes = map[string]string{`ID`: `integer`, `Name`: `character varying`, `Slug`: `character varying`, `Tags`: `ARRAYtext`, `Urls`: `ARRAYtext`}
	_             = bytes.MinRead
)

func testArtistsUpdate(t *testing.T) {
	t.Parallel()

	if len(artistColumns) == len(artistPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	artist := &Artist{}
	if err = randomize.Struct(seed, artist, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = artist.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Artists(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, artist, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	if err = artist.Update(tx); err != nil {
		t.Error(err)
	}
}

func testArtistsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(artistColumns) == len(artistPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	artist := &Artist{}
	if err = randomize.Struct(seed, artist, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = artist.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Artists(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, artist, artistDBTypes, true, artistPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(artistColumns, artistPrimaryKeyColumns) {
		fields = artistColumns
	} else {
		fields = strmangle.SetComplement(
			artistColumns,
			artistPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(artist))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := ArtistSlice{artist}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testArtistsUpsert(t *testing.T) {
	t.Parallel()

	if len(artistColumns) == len(artistPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	artist := Artist{}
	if err = randomize.Struct(seed, &artist, artistDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = artist.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Artist: %s", err)
	}

	count, err := Artists(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &artist, artistDBTypes, false, artistPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	if err = artist.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Artist: %s", err)
	}

	count, err = Artists(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
