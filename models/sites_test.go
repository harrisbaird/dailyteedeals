// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testSites(t *testing.T) {
	t.Parallel()

	query := Sites(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testSitesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	site := &Site{}
	if err = randomize.Struct(seed, site, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = site.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = site.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Sites(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSitesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	site := &Site{}
	if err = randomize.Struct(seed, site, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = site.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Sites(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Sites(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSitesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	site := &Site{}
	if err = randomize.Struct(seed, site, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = site.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SiteSlice{site}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Sites(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testSitesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	site := &Site{}
	if err = randomize.Struct(seed, site, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = site.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := SiteExists(tx, site.ID)
	if err != nil {
		t.Errorf("Unable to check if Site exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SiteExistsG to return true, but got false.")
	}
}
func testSitesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	site := &Site{}
	if err = randomize.Struct(seed, site, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = site.Insert(tx); err != nil {
		t.Error(err)
	}

	siteFound, err := FindSite(tx, site.ID)
	if err != nil {
		t.Error(err)
	}

	if siteFound == nil {
		t.Error("want a record, got nil")
	}
}
func testSitesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	site := &Site{}
	if err = randomize.Struct(seed, site, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = site.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Sites(tx).Bind(site); err != nil {
		t.Error(err)
	}
}

func testSitesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	site := &Site{}
	if err = randomize.Struct(seed, site, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = site.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Sites(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSitesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	siteOne := &Site{}
	siteTwo := &Site{}
	if err = randomize.Struct(seed, siteOne, siteDBTypes, false, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}
	if err = randomize.Struct(seed, siteTwo, siteDBTypes, false, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = siteOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = siteTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Sites(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSitesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	siteOne := &Site{}
	siteTwo := &Site{}
	if err = randomize.Struct(seed, siteOne, siteDBTypes, false, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}
	if err = randomize.Struct(seed, siteTwo, siteDBTypes, false, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = siteOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = siteTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Sites(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func siteBeforeInsertHook(e boil.Executor, o *Site) error {
	*o = Site{}
	return nil
}

func siteAfterInsertHook(e boil.Executor, o *Site) error {
	*o = Site{}
	return nil
}

func siteAfterSelectHook(e boil.Executor, o *Site) error {
	*o = Site{}
	return nil
}

func siteBeforeUpdateHook(e boil.Executor, o *Site) error {
	*o = Site{}
	return nil
}

func siteAfterUpdateHook(e boil.Executor, o *Site) error {
	*o = Site{}
	return nil
}

func siteBeforeDeleteHook(e boil.Executor, o *Site) error {
	*o = Site{}
	return nil
}

func siteAfterDeleteHook(e boil.Executor, o *Site) error {
	*o = Site{}
	return nil
}

func siteBeforeUpsertHook(e boil.Executor, o *Site) error {
	*o = Site{}
	return nil
}

func siteAfterUpsertHook(e boil.Executor, o *Site) error {
	*o = Site{}
	return nil
}

func testSitesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Site{}
	o := &Site{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, siteDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Site object: %s", err)
	}

	AddSiteHook(boil.BeforeInsertHook, siteBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	siteBeforeInsertHooks = []SiteHook{}

	AddSiteHook(boil.AfterInsertHook, siteAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	siteAfterInsertHooks = []SiteHook{}

	AddSiteHook(boil.AfterSelectHook, siteAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	siteAfterSelectHooks = []SiteHook{}

	AddSiteHook(boil.BeforeUpdateHook, siteBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	siteBeforeUpdateHooks = []SiteHook{}

	AddSiteHook(boil.AfterUpdateHook, siteAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	siteAfterUpdateHooks = []SiteHook{}

	AddSiteHook(boil.BeforeDeleteHook, siteBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	siteBeforeDeleteHooks = []SiteHook{}

	AddSiteHook(boil.AfterDeleteHook, siteAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	siteAfterDeleteHooks = []SiteHook{}

	AddSiteHook(boil.BeforeUpsertHook, siteBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	siteBeforeUpsertHooks = []SiteHook{}

	AddSiteHook(boil.AfterUpsertHook, siteAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	siteAfterUpsertHooks = []SiteHook{}
}
func testSitesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	site := &Site{}
	if err = randomize.Struct(seed, site, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = site.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Sites(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSitesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	site := &Site{}
	if err = randomize.Struct(seed, site, siteDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = site.Insert(tx, siteColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Sites(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSiteToManyProducts(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Site
	var b, c Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, productDBTypes, false, productColumnsWithDefault...)
	randomize.Struct(seed, &c, productDBTypes, false, productColumnsWithDefault...)

	b.SiteID = a.ID
	c.SiteID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	product, err := a.Products(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range product {
		if v.SiteID == b.SiteID {
			bFound = true
		}
		if v.SiteID == c.SiteID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SiteSlice{&a}
	if err = a.L.LoadProducts(tx, false, (*[]*Site)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Products); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Products = nil
	if err = a.L.LoadProducts(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Products); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", product)
	}
}

func testSiteToManyAddOpProducts(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Site
	var b, c, d, e Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, siteDBTypes, false, strmangle.SetComplement(sitePrimaryKeyColumns, siteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Product{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Product{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProducts(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SiteID {
			t.Error("foreign key was wrong value", a.ID, first.SiteID)
		}
		if a.ID != second.SiteID {
			t.Error("foreign key was wrong value", a.ID, second.SiteID)
		}

		if first.R.Site != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Site != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Products[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Products[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Products(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSitesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	site := &Site{}
	if err = randomize.Struct(seed, site, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = site.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = site.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSitesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	site := &Site{}
	if err = randomize.Struct(seed, site, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = site.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SiteSlice{site}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testSitesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	site := &Site{}
	if err = randomize.Struct(seed, site, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = site.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Sites(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	siteDBTypes = map[string]string{`Active`: `boolean`, `AffiliateURL`: `character varying`, `DealScraper`: `boolean`, `DisplayOrder`: `integer`, `DomainName`: `character varying`, `FullScraper`: `boolean`, `ID`: `integer`, `ImageTrimPixels`: `integer`, `Name`: `character varying`, `Slug`: `character varying`}
	_           = bytes.MinRead
)

func testSitesUpdate(t *testing.T) {
	t.Parallel()

	if len(siteColumns) == len(sitePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	site := &Site{}
	if err = randomize.Struct(seed, site, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = site.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Sites(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, site, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	if err = site.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSitesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(siteColumns) == len(sitePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	site := &Site{}
	if err = randomize.Struct(seed, site, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = site.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Sites(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, site, siteDBTypes, true, sitePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(siteColumns, sitePrimaryKeyColumns) {
		fields = siteColumns
	} else {
		fields = strmangle.SetComplement(
			siteColumns,
			sitePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(site))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := SiteSlice{site}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testSitesUpsert(t *testing.T) {
	t.Parallel()

	if len(siteColumns) == len(sitePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	site := Site{}
	if err = randomize.Struct(seed, &site, siteDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = site.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Site: %s", err)
	}

	count, err := Sites(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &site, siteDBTypes, false, sitePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	if err = site.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Site: %s", err)
	}

	count, err = Sites(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
