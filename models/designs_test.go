// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testDesigns(t *testing.T) {
	t.Parallel()

	query := Designs(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testDesignsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	design := &Design{}
	if err = randomize.Struct(seed, design, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = design.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = design.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Designs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDesignsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	design := &Design{}
	if err = randomize.Struct(seed, design, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = design.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Designs(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Designs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDesignsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	design := &Design{}
	if err = randomize.Struct(seed, design, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = design.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := DesignSlice{design}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Designs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testDesignsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	design := &Design{}
	if err = randomize.Struct(seed, design, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = design.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := DesignExists(tx, design.ID)
	if err != nil {
		t.Errorf("Unable to check if Design exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DesignExistsG to return true, but got false.")
	}
}
func testDesignsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	design := &Design{}
	if err = randomize.Struct(seed, design, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = design.Insert(tx); err != nil {
		t.Error(err)
	}

	designFound, err := FindDesign(tx, design.ID)
	if err != nil {
		t.Error(err)
	}

	if designFound == nil {
		t.Error("want a record, got nil")
	}
}
func testDesignsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	design := &Design{}
	if err = randomize.Struct(seed, design, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = design.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Designs(tx).Bind(design); err != nil {
		t.Error(err)
	}
}

func testDesignsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	design := &Design{}
	if err = randomize.Struct(seed, design, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = design.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Designs(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDesignsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	designOne := &Design{}
	designTwo := &Design{}
	if err = randomize.Struct(seed, designOne, designDBTypes, false, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}
	if err = randomize.Struct(seed, designTwo, designDBTypes, false, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = designOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = designTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Designs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDesignsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	designOne := &Design{}
	designTwo := &Design{}
	if err = randomize.Struct(seed, designOne, designDBTypes, false, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}
	if err = randomize.Struct(seed, designTwo, designDBTypes, false, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = designOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = designTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Designs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func designBeforeInsertHook(e boil.Executor, o *Design) error {
	*o = Design{}
	return nil
}

func designAfterInsertHook(e boil.Executor, o *Design) error {
	*o = Design{}
	return nil
}

func designAfterSelectHook(e boil.Executor, o *Design) error {
	*o = Design{}
	return nil
}

func designBeforeUpdateHook(e boil.Executor, o *Design) error {
	*o = Design{}
	return nil
}

func designAfterUpdateHook(e boil.Executor, o *Design) error {
	*o = Design{}
	return nil
}

func designBeforeDeleteHook(e boil.Executor, o *Design) error {
	*o = Design{}
	return nil
}

func designAfterDeleteHook(e boil.Executor, o *Design) error {
	*o = Design{}
	return nil
}

func designBeforeUpsertHook(e boil.Executor, o *Design) error {
	*o = Design{}
	return nil
}

func designAfterUpsertHook(e boil.Executor, o *Design) error {
	*o = Design{}
	return nil
}

func testDesignsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Design{}
	o := &Design{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, designDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Design object: %s", err)
	}

	AddDesignHook(boil.BeforeInsertHook, designBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	designBeforeInsertHooks = []DesignHook{}

	AddDesignHook(boil.AfterInsertHook, designAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	designAfterInsertHooks = []DesignHook{}

	AddDesignHook(boil.AfterSelectHook, designAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	designAfterSelectHooks = []DesignHook{}

	AddDesignHook(boil.BeforeUpdateHook, designBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	designBeforeUpdateHooks = []DesignHook{}

	AddDesignHook(boil.AfterUpdateHook, designAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	designAfterUpdateHooks = []DesignHook{}

	AddDesignHook(boil.BeforeDeleteHook, designBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	designBeforeDeleteHooks = []DesignHook{}

	AddDesignHook(boil.AfterDeleteHook, designAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	designAfterDeleteHooks = []DesignHook{}

	AddDesignHook(boil.BeforeUpsertHook, designBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	designBeforeUpsertHooks = []DesignHook{}

	AddDesignHook(boil.AfterUpsertHook, designAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	designAfterUpsertHooks = []DesignHook{}
}
func testDesignsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	design := &Design{}
	if err = randomize.Struct(seed, design, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = design.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Designs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDesignsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	design := &Design{}
	if err = randomize.Struct(seed, design, designDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = design.Insert(tx, designColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Designs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDesignToManyCategoryDesigns(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Design
	var b, c CategoryDesign

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, categoryDesignDBTypes, false, categoryDesignColumnsWithDefault...)
	randomize.Struct(seed, &c, categoryDesignDBTypes, false, categoryDesignColumnsWithDefault...)

	b.DesignID.Valid = true
	c.DesignID.Valid = true
	b.DesignID.Int = a.ID
	c.DesignID.Int = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	categoryDesign, err := a.CategoryDesigns(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range categoryDesign {
		if v.DesignID.Int == b.DesignID.Int {
			bFound = true
		}
		if v.DesignID.Int == c.DesignID.Int {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DesignSlice{&a}
	if err = a.L.LoadCategoryDesigns(tx, false, (*[]*Design)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CategoryDesigns); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CategoryDesigns = nil
	if err = a.L.LoadCategoryDesigns(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CategoryDesigns); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", categoryDesign)
	}
}

func testDesignToManyProducts(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Design
	var b, c Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, productDBTypes, false, productColumnsWithDefault...)
	randomize.Struct(seed, &c, productDBTypes, false, productColumnsWithDefault...)

	b.DesignID = a.ID
	c.DesignID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	product, err := a.Products(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range product {
		if v.DesignID == b.DesignID {
			bFound = true
		}
		if v.DesignID == c.DesignID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DesignSlice{&a}
	if err = a.L.LoadProducts(tx, false, (*[]*Design)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Products); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Products = nil
	if err = a.L.LoadProducts(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Products); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", product)
	}
}

func testDesignToManyAddOpCategoryDesigns(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Design
	var b, c, d, e CategoryDesign

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, designDBTypes, false, strmangle.SetComplement(designPrimaryKeyColumns, designColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CategoryDesign{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, categoryDesignDBTypes, false, strmangle.SetComplement(categoryDesignPrimaryKeyColumns, categoryDesignColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CategoryDesign{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCategoryDesigns(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.DesignID.Int {
			t.Error("foreign key was wrong value", a.ID, first.DesignID.Int)
		}
		if a.ID != second.DesignID.Int {
			t.Error("foreign key was wrong value", a.ID, second.DesignID.Int)
		}

		if first.R.Design != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Design != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CategoryDesigns[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CategoryDesigns[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CategoryDesigns(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDesignToManySetOpCategoryDesigns(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Design
	var b, c, d, e CategoryDesign

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, designDBTypes, false, strmangle.SetComplement(designPrimaryKeyColumns, designColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CategoryDesign{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, categoryDesignDBTypes, false, strmangle.SetComplement(categoryDesignPrimaryKeyColumns, categoryDesignColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetCategoryDesigns(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CategoryDesigns(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCategoryDesigns(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CategoryDesigns(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.DesignID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.DesignID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.DesignID.Int {
		t.Error("foreign key was wrong value", a.ID, d.DesignID.Int)
	}
	if a.ID != e.DesignID.Int {
		t.Error("foreign key was wrong value", a.ID, e.DesignID.Int)
	}

	if b.R.Design != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Design != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Design != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Design != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CategoryDesigns[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CategoryDesigns[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDesignToManyRemoveOpCategoryDesigns(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Design
	var b, c, d, e CategoryDesign

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, designDBTypes, false, strmangle.SetComplement(designPrimaryKeyColumns, designColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CategoryDesign{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, categoryDesignDBTypes, false, strmangle.SetComplement(categoryDesignPrimaryKeyColumns, categoryDesignColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddCategoryDesigns(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CategoryDesigns(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCategoryDesigns(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CategoryDesigns(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.DesignID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.DesignID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Design != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Design != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Design != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Design != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CategoryDesigns) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CategoryDesigns[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CategoryDesigns[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDesignToManyAddOpProducts(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Design
	var b, c, d, e Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, designDBTypes, false, strmangle.SetComplement(designPrimaryKeyColumns, designColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Product{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Product{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProducts(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.DesignID {
			t.Error("foreign key was wrong value", a.ID, first.DesignID)
		}
		if a.ID != second.DesignID {
			t.Error("foreign key was wrong value", a.ID, second.DesignID)
		}

		if first.R.Design != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Design != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Products[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Products[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Products(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDesignToOneArtistUsingArtist(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Design
	var foreign Artist

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, designDBTypes, false, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, artistDBTypes, false, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.ArtistID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Artist(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DesignSlice{&local}
	if err = local.L.LoadArtist(tx, false, (*[]*Design)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Artist == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Artist = nil
	if err = local.L.LoadArtist(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Artist == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDesignToOneSetOpArtistUsingArtist(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Design
	var b, c Artist

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, designDBTypes, false, strmangle.SetComplement(designPrimaryKeyColumns, designColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, artistDBTypes, false, strmangle.SetComplement(artistPrimaryKeyColumns, artistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, artistDBTypes, false, strmangle.SetComplement(artistPrimaryKeyColumns, artistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Artist{&b, &c} {
		err = a.SetArtist(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Artist != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Designs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ArtistID != x.ID {
			t.Error("foreign key was wrong value", a.ArtistID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ArtistID))
		reflect.Indirect(reflect.ValueOf(&a.ArtistID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ArtistID != x.ID {
			t.Error("foreign key was wrong value", a.ArtistID, x.ID)
		}
	}
}
func testDesignsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	design := &Design{}
	if err = randomize.Struct(seed, design, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = design.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = design.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testDesignsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	design := &Design{}
	if err = randomize.Struct(seed, design, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = design.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := DesignSlice{design}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testDesignsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	design := &Design{}
	if err = randomize.Struct(seed, design, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = design.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Designs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	designDBTypes = map[string]string{`ArtistID`: `integer`, `CategoryTags`: `ARRAYtext`, `Description`: `text`, `ID`: `integer`, `Mature`: `boolean`, `Name`: `text`, `Slug`: `text`, `Tags`: `ARRAYtext`}
	_             = bytes.MinRead
)

func testDesignsUpdate(t *testing.T) {
	t.Parallel()

	if len(designColumns) == len(designPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	design := &Design{}
	if err = randomize.Struct(seed, design, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = design.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Designs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, design, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	if err = design.Update(tx); err != nil {
		t.Error(err)
	}
}

func testDesignsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(designColumns) == len(designPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	design := &Design{}
	if err = randomize.Struct(seed, design, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = design.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Designs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, design, designDBTypes, true, designPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(designColumns, designPrimaryKeyColumns) {
		fields = designColumns
	} else {
		fields = strmangle.SetComplement(
			designColumns,
			designPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(design))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := DesignSlice{design}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testDesignsUpsert(t *testing.T) {
	t.Parallel()

	if len(designColumns) == len(designPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	design := Design{}
	if err = randomize.Struct(seed, &design, designDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = design.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Design: %s", err)
	}

	count, err := Designs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &design, designDBTypes, false, designPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	if err = design.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Design: %s", err)
	}

	count, err = Designs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
