// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Artists", testArtists)
	t.Run("Categories", testCategories)
	t.Run("CategoryDesigns", testCategoryDesigns)
	t.Run("Designs", testDesigns)
	t.Run("Products", testProducts)
	t.Run("Sites", testSites)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Artists", testArtistsDelete)
	t.Run("Categories", testCategoriesDelete)
	t.Run("CategoryDesigns", testCategoryDesignsDelete)
	t.Run("Designs", testDesignsDelete)
	t.Run("Products", testProductsDelete)
	t.Run("Sites", testSitesDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Artists", testArtistsQueryDeleteAll)
	t.Run("Categories", testCategoriesQueryDeleteAll)
	t.Run("CategoryDesigns", testCategoryDesignsQueryDeleteAll)
	t.Run("Designs", testDesignsQueryDeleteAll)
	t.Run("Products", testProductsQueryDeleteAll)
	t.Run("Sites", testSitesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Artists", testArtistsSliceDeleteAll)
	t.Run("Categories", testCategoriesSliceDeleteAll)
	t.Run("CategoryDesigns", testCategoryDesignsSliceDeleteAll)
	t.Run("Designs", testDesignsSliceDeleteAll)
	t.Run("Products", testProductsSliceDeleteAll)
	t.Run("Sites", testSitesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Artists", testArtistsExists)
	t.Run("Categories", testCategoriesExists)
	t.Run("CategoryDesigns", testCategoryDesignsExists)
	t.Run("Designs", testDesignsExists)
	t.Run("Products", testProductsExists)
	t.Run("Sites", testSitesExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Artists", testArtistsFind)
	t.Run("Categories", testCategoriesFind)
	t.Run("CategoryDesigns", testCategoryDesignsFind)
	t.Run("Designs", testDesignsFind)
	t.Run("Products", testProductsFind)
	t.Run("Sites", testSitesFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Artists", testArtistsBind)
	t.Run("Categories", testCategoriesBind)
	t.Run("CategoryDesigns", testCategoryDesignsBind)
	t.Run("Designs", testDesignsBind)
	t.Run("Products", testProductsBind)
	t.Run("Sites", testSitesBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Artists", testArtistsOne)
	t.Run("Categories", testCategoriesOne)
	t.Run("CategoryDesigns", testCategoryDesignsOne)
	t.Run("Designs", testDesignsOne)
	t.Run("Products", testProductsOne)
	t.Run("Sites", testSitesOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Artists", testArtistsAll)
	t.Run("Categories", testCategoriesAll)
	t.Run("CategoryDesigns", testCategoryDesignsAll)
	t.Run("Designs", testDesignsAll)
	t.Run("Products", testProductsAll)
	t.Run("Sites", testSitesAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Artists", testArtistsCount)
	t.Run("Categories", testCategoriesCount)
	t.Run("CategoryDesigns", testCategoryDesignsCount)
	t.Run("Designs", testDesignsCount)
	t.Run("Products", testProductsCount)
	t.Run("Sites", testSitesCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Artists", testArtistsHooks)
	t.Run("Categories", testCategoriesHooks)
	t.Run("CategoryDesigns", testCategoryDesignsHooks)
	t.Run("Designs", testDesignsHooks)
	t.Run("Products", testProductsHooks)
	t.Run("Sites", testSitesHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Artists", testArtistsInsert)
	t.Run("Artists", testArtistsInsertWhitelist)
	t.Run("Categories", testCategoriesInsert)
	t.Run("Categories", testCategoriesInsertWhitelist)
	t.Run("CategoryDesigns", testCategoryDesignsInsert)
	t.Run("CategoryDesigns", testCategoryDesignsInsertWhitelist)
	t.Run("Designs", testDesignsInsert)
	t.Run("Designs", testDesignsInsertWhitelist)
	t.Run("Products", testProductsInsert)
	t.Run("Products", testProductsInsertWhitelist)
	t.Run("Sites", testSitesInsert)
	t.Run("Sites", testSitesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("CategoryDesignToCategoryUsingCategory", testCategoryDesignToOneCategoryUsingCategory)
	t.Run("CategoryDesignToDesignUsingDesign", testCategoryDesignToOneDesignUsingDesign)
	t.Run("DesignToArtistUsingArtist", testDesignToOneArtistUsingArtist)
	t.Run("ProductToDesignUsingDesign", testProductToOneDesignUsingDesign)
	t.Run("ProductToSiteUsingSite", testProductToOneSiteUsingSite)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ArtistToDesigns", testArtistToManyDesigns)
	t.Run("CategoryToCategoryDesigns", testCategoryToManyCategoryDesigns)
	t.Run("DesignToCategoryDesigns", testDesignToManyCategoryDesigns)
	t.Run("DesignToProducts", testDesignToManyProducts)
	t.Run("SiteToProducts", testSiteToManyProducts)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("CategoryDesignToCategoryUsingCategory", testCategoryDesignToOneSetOpCategoryUsingCategory)
	t.Run("CategoryDesignToDesignUsingDesign", testCategoryDesignToOneSetOpDesignUsingDesign)
	t.Run("DesignToArtistUsingArtist", testDesignToOneSetOpArtistUsingArtist)
	t.Run("ProductToDesignUsingDesign", testProductToOneSetOpDesignUsingDesign)
	t.Run("ProductToSiteUsingSite", testProductToOneSetOpSiteUsingSite)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("CategoryDesignToCategoryUsingCategory", testCategoryDesignToOneRemoveOpCategoryUsingCategory)
	t.Run("CategoryDesignToDesignUsingDesign", testCategoryDesignToOneRemoveOpDesignUsingDesign)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ArtistToDesigns", testArtistToManyAddOpDesigns)
	t.Run("CategoryToCategoryDesigns", testCategoryToManyAddOpCategoryDesigns)
	t.Run("DesignToCategoryDesigns", testDesignToManyAddOpCategoryDesigns)
	t.Run("DesignToProducts", testDesignToManyAddOpProducts)
	t.Run("SiteToProducts", testSiteToManyAddOpProducts)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("CategoryToCategoryDesigns", testCategoryToManySetOpCategoryDesigns)
	t.Run("DesignToCategoryDesigns", testDesignToManySetOpCategoryDesigns)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("CategoryToCategoryDesigns", testCategoryToManyRemoveOpCategoryDesigns)
	t.Run("DesignToCategoryDesigns", testDesignToManyRemoveOpCategoryDesigns)
}

func TestReload(t *testing.T) {
	t.Run("Artists", testArtistsReload)
	t.Run("Categories", testCategoriesReload)
	t.Run("CategoryDesigns", testCategoryDesignsReload)
	t.Run("Designs", testDesignsReload)
	t.Run("Products", testProductsReload)
	t.Run("Sites", testSitesReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Artists", testArtistsReloadAll)
	t.Run("Categories", testCategoriesReloadAll)
	t.Run("CategoryDesigns", testCategoryDesignsReloadAll)
	t.Run("Designs", testDesignsReloadAll)
	t.Run("Products", testProductsReloadAll)
	t.Run("Sites", testSitesReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Artists", testArtistsSelect)
	t.Run("Categories", testCategoriesSelect)
	t.Run("CategoryDesigns", testCategoryDesignsSelect)
	t.Run("Designs", testDesignsSelect)
	t.Run("Products", testProductsSelect)
	t.Run("Sites", testSitesSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Artists", testArtistsUpdate)
	t.Run("Categories", testCategoriesUpdate)
	t.Run("CategoryDesigns", testCategoryDesignsUpdate)
	t.Run("Designs", testDesignsUpdate)
	t.Run("Products", testProductsUpdate)
	t.Run("Sites", testSitesUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Artists", testArtistsSliceUpdateAll)
	t.Run("Categories", testCategoriesSliceUpdateAll)
	t.Run("CategoryDesigns", testCategoryDesignsSliceUpdateAll)
	t.Run("Designs", testDesignsSliceUpdateAll)
	t.Run("Products", testProductsSliceUpdateAll)
	t.Run("Sites", testSitesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}

func TestUpsert(t *testing.T) {
	t.Run("Artists", testArtistsUpsert)
	t.Run("Categories", testCategoriesUpsert)
	t.Run("CategoryDesigns", testCategoryDesignsUpsert)
	t.Run("Designs", testDesignsUpsert)
	t.Run("Products", testProductsUpsert)
	t.Run("Sites", testSitesUpsert)
	t.Run("Users", testUsersUpsert)
}
