// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"github.com/vattle/sqlboiler/types"
	"gopkg.in/nullbio/null.v6"
)

// Product is an object representing the database table.
type Product struct {
	ID              int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	DesignID        int               `boil:"design_id" json:"design_id" toml:"design_id" yaml:"design_id"`
	SiteID          int               `boil:"site_id" json:"site_id" toml:"site_id" yaml:"site_id"`
	Slug            string            `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	URL             string            `boil:"url" json:"url" toml:"url" yaml:"url"`
	Active          bool              `boil:"active" json:"active" toml:"active" yaml:"active"`
	Deal            bool              `boil:"deal" json:"deal" toml:"deal" yaml:"deal"`
	LastChance      bool              `boil:"last_chance" json:"last_chance" toml:"last_chance" yaml:"last_chance"`
	Tags            types.StringArray `boil:"tags" json:"tags,omitempty" toml:"tags" yaml:"tags,omitempty"`
	Prices          types.HStore      `boil:"prices" json:"prices" toml:"prices" yaml:"prices"`
	ExpiresAt       null.Time         `boil:"expires_at" json:"expires_at,omitempty" toml:"expires_at" yaml:"expires_at,omitempty"`
	ActiveAt        null.Time         `boil:"active_at" json:"active_at,omitempty" toml:"active_at" yaml:"active_at,omitempty"`
	ImageBackground string            `boil:"image_background" json:"image_background" toml:"image_background" yaml:"image_background"`
	ImageUpdatedAt  time.Time         `boil:"image_updated_at" json:"image_updated_at" toml:"image_updated_at" yaml:"image_updated_at"`

	R *productR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// productR is where relationships are stored.
type productR struct {
	Design *Design
	Site   *Site
}

// productL is where Load methods for each relationship are stored.
type productL struct{}

var (
	productColumns               = []string{"id", "design_id", "site_id", "slug", "url", "active", "deal", "last_chance", "tags", "prices", "expires_at", "active_at", "image_background", "image_updated_at"}
	productColumnsWithoutDefault = []string{"id", "design_id", "site_id", "slug", "url", "expires_at", "active_at"}
	productColumnsWithDefault    = []string{"active", "deal", "last_chance", "tags", "prices", "image_background", "image_updated_at"}
	productPrimaryKeyColumns     = []string{"id"}
)

type (
	// ProductSlice is an alias for a slice of pointers to Product.
	// This should generally be used opposed to []Product.
	ProductSlice []*Product
	// ProductHook is the signature for custom Product hook methods
	ProductHook func(boil.Executor, *Product) error

	productQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productType                 = reflect.TypeOf(&Product{})
	productMapping              = queries.MakeStructMapping(productType)
	productPrimaryKeyMapping, _ = queries.BindMapping(productType, productMapping, productPrimaryKeyColumns)
	productInsertCacheMut       sync.RWMutex
	productInsertCache          = make(map[string]insertCache)
	productUpdateCacheMut       sync.RWMutex
	productUpdateCache          = make(map[string]updateCache)
	productUpsertCacheMut       sync.RWMutex
	productUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var productBeforeInsertHooks []ProductHook
var productBeforeUpdateHooks []ProductHook
var productBeforeDeleteHooks []ProductHook
var productBeforeUpsertHooks []ProductHook

var productAfterInsertHooks []ProductHook
var productAfterSelectHooks []ProductHook
var productAfterUpdateHooks []ProductHook
var productAfterDeleteHooks []ProductHook
var productAfterUpsertHooks []ProductHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Product) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range productBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Product) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range productBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Product) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range productBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Product) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range productBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Product) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range productAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Product) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range productAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Product) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range productAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Product) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range productAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Product) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range productAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductHook registers your hook function for all future operations.
func AddProductHook(hookPoint boil.HookPoint, productHook ProductHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		productBeforeInsertHooks = append(productBeforeInsertHooks, productHook)
	case boil.BeforeUpdateHook:
		productBeforeUpdateHooks = append(productBeforeUpdateHooks, productHook)
	case boil.BeforeDeleteHook:
		productBeforeDeleteHooks = append(productBeforeDeleteHooks, productHook)
	case boil.BeforeUpsertHook:
		productBeforeUpsertHooks = append(productBeforeUpsertHooks, productHook)
	case boil.AfterInsertHook:
		productAfterInsertHooks = append(productAfterInsertHooks, productHook)
	case boil.AfterSelectHook:
		productAfterSelectHooks = append(productAfterSelectHooks, productHook)
	case boil.AfterUpdateHook:
		productAfterUpdateHooks = append(productAfterUpdateHooks, productHook)
	case boil.AfterDeleteHook:
		productAfterDeleteHooks = append(productAfterDeleteHooks, productHook)
	case boil.AfterUpsertHook:
		productAfterUpsertHooks = append(productAfterUpsertHooks, productHook)
	}
}

// OneP returns a single product record from the query, and panics on error.
func (q productQuery) OneP() *Product {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single product record from the query.
func (q productQuery) One() (*Product, error) {
	o := &Product{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for products")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Product records from the query, and panics on error.
func (q productQuery) AllP() ProductSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Product records from the query.
func (q productQuery) All() (ProductSlice, error) {
	var o []*Product

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Product slice")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Product records in the query, and panics on error.
func (q productQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Product records in the query.
func (q productQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count products rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q productQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q productQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if products exists")
	}

	return count > 0, nil
}

// DesignG pointed to by the foreign key.
func (o *Product) DesignG(mods ...qm.QueryMod) designQuery {
	return o.Design(boil.GetDB(), mods...)
}

// Design pointed to by the foreign key.
func (o *Product) Design(exec boil.Executor, mods ...qm.QueryMod) designQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.DesignID),
	}

	queryMods = append(queryMods, mods...)

	query := Designs(exec, queryMods...)
	queries.SetFrom(query.Query, "\"designs\"")

	return query
}

// SiteG pointed to by the foreign key.
func (o *Product) SiteG(mods ...qm.QueryMod) siteQuery {
	return o.Site(boil.GetDB(), mods...)
}

// Site pointed to by the foreign key.
func (o *Product) Site(exec boil.Executor, mods ...qm.QueryMod) siteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.SiteID),
	}

	queryMods = append(queryMods, mods...)

	query := Sites(exec, queryMods...)
	queries.SetFrom(query.Query, "\"sites\"")

	return query
} // LoadDesign allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (productL) LoadDesign(e boil.Executor, singular bool, maybeProduct interface{}) error {
	var slice []*Product
	var object *Product

	count := 1
	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args[0] = object.DesignID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}
			args[i] = obj.DesignID
		}
	}

	query := fmt.Sprintf(
		"select * from \"designs\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Design")
	}
	defer results.Close()

	var resultSlice []*Design
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Design")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Design = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DesignID == foreign.ID {
				local.R.Design = foreign
				break
			}
		}
	}

	return nil
}

// LoadSite allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (productL) LoadSite(e boil.Executor, singular bool, maybeProduct interface{}) error {
	var slice []*Product
	var object *Product

	count := 1
	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args[0] = object.SiteID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}
			args[i] = obj.SiteID
		}
	}

	query := fmt.Sprintf(
		"select * from \"sites\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Site")
	}
	defer results.Close()

	var resultSlice []*Site
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Site")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Site = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SiteID == foreign.ID {
				local.R.Site = foreign
				break
			}
		}
	}

	return nil
}

// SetDesignG of the product to the related item.
// Sets o.R.Design to related.
// Adds o to related.R.Products.
// Uses the global database handle.
func (o *Product) SetDesignG(insert bool, related *Design) error {
	return o.SetDesign(boil.GetDB(), insert, related)
}

// SetDesignP of the product to the related item.
// Sets o.R.Design to related.
// Adds o to related.R.Products.
// Panics on error.
func (o *Product) SetDesignP(exec boil.Executor, insert bool, related *Design) {
	if err := o.SetDesign(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetDesignGP of the product to the related item.
// Sets o.R.Design to related.
// Adds o to related.R.Products.
// Uses the global database handle and panics on error.
func (o *Product) SetDesignGP(insert bool, related *Design) {
	if err := o.SetDesign(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetDesign of the product to the related item.
// Sets o.R.Design to related.
// Adds o to related.R.Products.
func (o *Product) SetDesign(exec boil.Executor, insert bool, related *Design) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"design_id"}),
		strmangle.WhereClause("\"", "\"", 2, productPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DesignID = related.ID

	if o.R == nil {
		o.R = &productR{
			Design: related,
		}
	} else {
		o.R.Design = related
	}

	if related.R == nil {
		related.R = &designR{
			Products: ProductSlice{o},
		}
	} else {
		related.R.Products = append(related.R.Products, o)
	}

	return nil
}

// SetSiteG of the product to the related item.
// Sets o.R.Site to related.
// Adds o to related.R.Products.
// Uses the global database handle.
func (o *Product) SetSiteG(insert bool, related *Site) error {
	return o.SetSite(boil.GetDB(), insert, related)
}

// SetSiteP of the product to the related item.
// Sets o.R.Site to related.
// Adds o to related.R.Products.
// Panics on error.
func (o *Product) SetSiteP(exec boil.Executor, insert bool, related *Site) {
	if err := o.SetSite(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSiteGP of the product to the related item.
// Sets o.R.Site to related.
// Adds o to related.R.Products.
// Uses the global database handle and panics on error.
func (o *Product) SetSiteGP(insert bool, related *Site) {
	if err := o.SetSite(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSite of the product to the related item.
// Sets o.R.Site to related.
// Adds o to related.R.Products.
func (o *Product) SetSite(exec boil.Executor, insert bool, related *Site) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"site_id"}),
		strmangle.WhereClause("\"", "\"", 2, productPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SiteID = related.ID

	if o.R == nil {
		o.R = &productR{
			Site: related,
		}
	} else {
		o.R.Site = related
	}

	if related.R == nil {
		related.R = &siteR{
			Products: ProductSlice{o},
		}
	} else {
		related.R.Products = append(related.R.Products, o)
	}

	return nil
}

// ProductsG retrieves all records.
func ProductsG(mods ...qm.QueryMod) productQuery {
	return Products(boil.GetDB(), mods...)
}

// Products retrieves all the records using an executor.
func Products(exec boil.Executor, mods ...qm.QueryMod) productQuery {
	mods = append(mods, qm.From("\"products\""))
	return productQuery{NewQuery(exec, mods...)}
}

// FindProductG retrieves a single record by ID.
func FindProductG(id int, selectCols ...string) (*Product, error) {
	return FindProduct(boil.GetDB(), id, selectCols...)
}

// FindProductGP retrieves a single record by ID, and panics on error.
func FindProductGP(id int, selectCols ...string) *Product {
	retobj, err := FindProduct(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProduct(exec boil.Executor, id int, selectCols ...string) (*Product, error) {
	productObj := &Product{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"products\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(productObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from products")
	}

	return productObj, nil
}

// FindProductP retrieves a single record by ID with an executor, and panics on error.
func FindProductP(exec boil.Executor, id int, selectCols ...string) *Product {
	retobj, err := FindProduct(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Product) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Product) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Product) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Product) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no products provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	productInsertCacheMut.RLock()
	cache, cached := productInsertCache[key]
	productInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			productColumns,
			productColumnsWithDefault,
			productColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(productType, productMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productType, productMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"products\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"products\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into products")
	}

	if !cached {
		productInsertCacheMut.Lock()
		productInsertCache[key] = cache
		productInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Product record. See Update for
// whitelist behavior description.
func (o *Product) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Product record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Product) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Product, and panics on error.
// See Update for whitelist behavior description.
func (o *Product) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Product.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Product) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	productUpdateCacheMut.RLock()
	cache, cached := productUpdateCache[key]
	productUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			productColumns,
			productPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"products\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productType, productMapping, append(wl, productPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update products row")
	}

	if !cached {
		productUpdateCacheMut.Lock()
		productUpdateCache[key] = cache
		productUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q productQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q productQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for products")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ProductSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ProductSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ProductSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in product slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Product) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Product) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Product) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Product) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no products provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productUpsertCacheMut.RLock()
	cache, cached := productUpsertCache[key]
	productUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			productColumns,
			productColumnsWithDefault,
			productColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			productColumns,
			productPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert products, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productPrimaryKeyColumns))
			copy(conflict, productPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"products\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productType, productMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productType, productMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert products")
	}

	if !cached {
		productUpsertCacheMut.Lock()
		productUpsertCache[key] = cache
		productUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Product record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Product) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Product record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Product) DeleteG() error {
	if o == nil {
		return errors.New("models: no Product provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Product record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Product) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Product record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Product) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Product provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productPrimaryKeyMapping)
	sql := "DELETE FROM \"products\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from products")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q productQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q productQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no productQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from products")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ProductSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o ProductSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Product slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ProductSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Product slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(productBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from product slice")
	}

	if len(productAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Product) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Product) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Product) ReloadG() error {
	if o == nil {
		return errors.New("models: no Product provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Product) Reload(exec boil.Executor) error {
	ret, err := FindProduct(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ProductSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ProductSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ProductSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	products := ProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"products\".* FROM \"products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&products)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductSlice")
	}

	*o = products

	return nil
}

// ProductExists checks if the Product row exists.
func ProductExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"products\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if products exists")
	}

	return exists, nil
}

// ProductExistsG checks if the Product row exists.
func ProductExistsG(id int) (bool, error) {
	return ProductExists(boil.GetDB(), id)
}

// ProductExistsGP checks if the Product row exists. Panics on error.
func ProductExistsGP(id int) bool {
	e, err := ProductExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ProductExistsP checks if the Product row exists. Panics on error.
func ProductExistsP(exec boil.Executor, id int) bool {
	e, err := ProductExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
